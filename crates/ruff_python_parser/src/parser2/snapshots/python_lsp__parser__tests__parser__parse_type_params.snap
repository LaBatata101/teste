---
source: src/parser/tests.rs
expression: "parse(\"\ndef max[T](args: Iterable[T]) -> T:\n    ...\nclass list[T]:\n    ...\n\")"
---
ParsedFile {
    ast: Module {
        body: [
            FunctionDef(
                FunctionDefStmt {
                    name: Valid(
                        Identifier {
                            id: "max",
                            range: 5..8,
                        },
                    ),
                    type_params: Some(
                        TypeParams {
                            type_params: [
                                TypeVar(
                                    TypeParamTypeVar {
                                        name: Valid(
                                            Identifier {
                                                id: "T",
                                                range: 9..10,
                                            },
                                        ),
                                        bound: None,
                                        range: 9..10,
                                    },
                                ),
                            ],
                            range: 8..11,
                        },
                    ),
                    parameters: Parameters {
                        kwarg: None,
                        vararg: None,
                        args: [
                            ParameterWithDefault {
                                parameter: Parameter {
                                    name: Valid(
                                        Identifier {
                                            id: "args",
                                            range: 12..16,
                                        },
                                    ),
                                    annotation: Some(
                                        Subscript(
                                            SubscriptExpr {
                                                value: Id(
                                                    IdExpr {
                                                        id: "Iterable",
                                                        ctx: Load,
                                                        range: 18..26,
                                                    },
                                                ),
                                                slice: Id(
                                                    IdExpr {
                                                        id: "T",
                                                        ctx: Load,
                                                        range: 27..28,
                                                    },
                                                ),
                                                ctx: Load,
                                                range: 18..29,
                                            },
                                        ),
                                    ),
                                    range: 12..29,
                                },
                                default: None,
                                range: 12..29,
                            },
                        ],
                        posonlyargs: [],
                        kwonlyargs: [],
                        range: 12..29,
                    },
                    body: [
                        Expression(
                            ExpressionStmt {
                                value: Ellipsis(
                                    EllipsisExpr {
                                        range: 41..44,
                                    },
                                ),
                                range: 41..44,
                            },
                        ),
                    ],
                    decorators: [],
                    returns: Some(
                        Id(
                            IdExpr {
                                id: "T",
                                ctx: Load,
                                range: 34..35,
                            },
                        ),
                    ),
                    range: 1..44,
                },
            ),
            Class(
                ClassDefStmt {
                    decorators: [],
                    name: Valid(
                        Identifier {
                            id: "list",
                            range: 51..55,
                        },
                    ),
                    type_params: Some(
                        TypeParams {
                            type_params: [
                                TypeVar(
                                    TypeParamTypeVar {
                                        name: Valid(
                                            Identifier {
                                                id: "T",
                                                range: 56..57,
                                            },
                                        ),
                                        bound: None,
                                        range: 56..57,
                                    },
                                ),
                            ],
                            range: 55..58,
                        },
                    ),
                    arguments: None,
                    body: [
                        Expression(
                            ExpressionStmt {
                                value: Ellipsis(
                                    EllipsisExpr {
                                        range: 64..67,
                                    },
                                ),
                                range: 64..67,
                            },
                        ),
                    ],
                    range: 45..67,
                },
            ),
        ],
        range: 0..67,
    },
    parse_errors: [],
}
